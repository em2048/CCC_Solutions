import java.util.*;
import java.io.*;

public class CCC_15_S4 {

	static class edge implements Comparable<edge> {
		int dest;
		long time;
		int cost;

		edge(int d, long t, int h) {
			dest = d;
			time = t;
			cost = h;
		}

		public int compareTo(edge other) {
			if (this.time == other.time) {
				return Integer.compare(this.cost, other.cost);
			} else {
				return Long.compare(this.time, other.time);
			}
		}

		public String toString() {
			return "dest: " + dest + " time: " + time + " cost: " + cost;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int k = Integer.parseInt(st.nextToken());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		long[][] dist = new long[n + 1][k]; // dist[node][cost]
		for (long[] a : dist) {
			Arrays.fill(a, (long) 1e15);
		}
		List<edge>[] adj = new ArrayList[n + 1];
		for (int i = 1; i <= n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int t = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			adj[u].add(new edge(v, t, c));
			adj[v].add(new edge(u, t, c));
		}
		st = new StringTokenizer(br.readLine());
		int a = Integer.parseInt(st.nextToken());
		int b = Integer.parseInt(st.nextToken());

		PriorityQueue<edge> pq = new PriorityQueue<>();
		PriorityQueue<Long> ans = new PriorityQueue<>();
		Arrays.fill(dist[a], 0);
		pq.add(new edge(a, 0, 0));
		
		while (!pq.isEmpty()) {
			edge cur = pq.poll();
			if (cur.time > dist[cur.dest][cur.cost]) {
				continue;
			}
			if (cur.dest == b) { // possible ans
				ans.add(cur.time);
			}
			for (edge next : adj[cur.dest]) {
				if (cur.cost + next.cost < k) { // can consider path
					if (cur.time + next.time < dist[next.dest][cur.cost + next.cost]) {
						dist[next.dest][cur.cost + next.cost] = cur.time + next.time;
						
						// add new edge(next, dist[next][cost]=time, cost)
						pq.add(new edge(next.dest, dist[next.dest][cur.cost + next.cost], cur.cost + next.cost));
					}
				}
			}

		}
		System.out.println(ans.isEmpty() ? -1 : ans.poll());

	}
}

