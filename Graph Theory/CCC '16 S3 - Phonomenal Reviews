import java.util.*;
import java.io.*;

public class CCC_16_S3 {
    static List<Integer>[] adj;
    static int[] step;
    static int[] parent;
    static boolean[] visited;
    static boolean[] related;

    static void dfs(int cur) {
        for (int next : adj[cur]) {
            if (!visited[next]) {
                visited[next] = true;
                parent[next] = cur;
                dfs(next);
            }
        }
    }
    static void dfs1(int cur) {
        for (int next : adj[cur]) {
            if (related[next] && !visited[next]) {
                step[next] = step[cur] + 1;
                visited[next] = true;
                dfs1(next);
            }
        }
    }
    
    
    public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());

        step = new int[n];
        parent = new int[n];
        visited = new boolean[n];
        int[] pho = new int[m];
        related = new boolean[n];
        

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < m; i++) {
            pho[i] = Integer.parseInt(st.nextToken());
        }
        adj = new ArrayList[n];

        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < n - 1; i++) {
            st = new StringTokenizer(br.readLine());
            int src = Integer.parseInt(st.nextToken());
            int dest = Integer.parseInt(st.nextToken());
            adj[src].add(dest);
            adj[dest].add(src);
        }
        
        visited[pho[0]] = true;
        dfs(pho[0]);
        related[pho[0]] = true;
        
        for (int i = 1; i <m; i++) {
            int begin = pho[i];
            related[begin] = true;
            int before = parent[begin];
            while (!related[before]) {
                
                related[before] = true;
                before = parent[before];
            }
        }
        int edge = -1;
        for (int i = 0; i <n; i++) {
            if (related[i]) edge++;
        }
        
        Arrays.fill(visited, false);
        visited[pho[0]] = true;
        dfs1(pho[0]);
        int endpoint = 0;
        for (int i = 0; i < n; i++) {
            if (step[i] > step[endpoint]) {
                endpoint = i;
            }
        }
        
        Arrays.fill(visited, false);
        Arrays.fill(step, 0);
        visited[endpoint] = true;
        dfs1(endpoint);
        Arrays.sort(step);
        int distance = step[n - 1];
        
        System.out.println((edge - distance) * 2 + distance);
    }

}
