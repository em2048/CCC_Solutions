import java.util.*;
import java.io.*;

public class CCC_18_S3 {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());

		int step[][] = new int[n][m];
		char map[][] = new char[n][m];
		boolean camera[][] = new boolean[n][m];
		int directions[][] = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 }, }; // up, right, down, left
		ArrayList<Integer> locCamera = new ArrayList<>();
		Queue<Integer> queue = new LinkedList<>();
		boolean unlucky = false;

		// puts in 2d array, marks where cameras are + starting pos
		for (int i = 0; i < n; i++) {
			String input = br.readLine();
			for (int j = 0; j < m; j++) {
				map[i][j] = input.charAt(j);
				step[i][j] = Integer.MAX_VALUE;
				if (input.charAt(j) == 'S') {
					step[i][j] = 0;
					queue.add(i);
					queue.add(j);

				}
				if (input.charAt(j) == 'C') {
					locCamera.add(i);
					locCamera.add(j);
				}

			}
		}

		for (int i = 0; i < locCamera.size(); i += 2) {
			int ci = locCamera.get(i);
			int cj = locCamera.get(i + 1);
			camera[ci][cj] = true;
			// marks what camera sees
			for (int d = 0; d < 4; d++) {
				int ni = ci + directions[d][0];
				int nj = cj + directions[d][1];

				while (ni >= 0 && ni < n && nj >= 0 && nj < m && map[ni][nj] != 'W') {
					if (map[ni][nj] == 'S')
						unlucky = true;
					if (map[ni][nj] != 'L' || map[ni][nj] != 'R' || map[ni][nj] != 'U' || map[ni][nj] != 'D')
						camera[ni][nj] = true;

					ni = ni + directions[d][0];
					nj = nj + directions[d][1];
				}
			}

		}

		while (!queue.isEmpty()) {
			int ci = queue.poll();
			int cj = queue.poll();
			for (int d = 0; d < 4; d++) {
				int ni = ci + directions[d][0];
				int nj = cj + directions[d][1];
				if (ni >= 0 && ni < n && nj >= 0 && nj < m) {
					if (map[ni][nj] == '.' && step[ci][cj] + 1 < step[ni][nj] && !camera[ni][nj]) {
						// normal open path
						step[ni][nj] = step[ci][cj] + 1;
						queue.add(ni);
						queue.add(nj);
					} else if (map[ni][nj] == 'L' || map[ni][nj] == 'R' || map[ni][nj] == 'U' || map[ni][nj] == 'D') {
						// conveyor belt
						int nexti;
						int nextj;
						if (map[ni][nj] == 'U') {
							nexti = ni + directions[0][0];
							nextj = nj + directions[0][1];
						} else if (map[ni][nj] == 'R') {
							nexti = ni + directions[1][0];
							nextj = nj + directions[1][1];
						} else if (map[ni][nj] == 'D') {
							nexti = ni + directions[2][0];
							nextj = nj + directions[2][1];
						} else {
							nexti = ni + directions[3][0];
							nextj = nj + directions[3][1];
						}

						while (map[nexti][nextj] != '.') {
							if (nexti >= 0 && nexti < n && nextj >= 0 && nextj < m) {
								if ((nexti == ni && nextj == nj) || map[nexti][nextj] == 'W'
										|| map[nexti][nextj] == 'S') {
									map[ni][nj] = 'W';
									break;
								}

								if (map[nexti][nextj] == 'U') {
									nexti = nexti + directions[0][0];
									nextj = nextj + directions[0][1];
								} else if (map[nexti][nextj] == 'R') {
									nexti = nexti + directions[1][0];
									nextj = nextj + directions[1][1];
								} else if (map[nexti][nextj] == 'D') {
									nexti = nexti + directions[2][0];
									nextj = nextj + directions[2][1];
								} else {
									nexti = nexti + directions[3][0];
									nextj = nextj + directions[3][1];
								}

							}
						}
						if (map[nexti][nextj] == '.') {
							if (step[nexti][nextj] > step[ci][cj] + 1 && !camera[nexti][nextj]) {
								step[nexti][nextj] = step[ci][cj] + 1;
								queue.add(nexti);
								queue.add(nextj);
							}
						}

					}

				}

			}
		}
		if (unlucky) {
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					if (map[i][j] == '.')
						System.out.println(-1);
				}
			}
			return;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (step[i][j] != Integer.MAX_VALUE && map[i][j] == '.') {
					System.out.println(step[i][j]);
				} else if (map[i][j] == '.') {
					System.out.println(-1);
				}
			}
		}

	}

}
