#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pi;

vector<char> colour;
vector<bool> vis;

void dfs(int cur, char col, vector<pi> adj[]) {
    for (auto [next, idx]:adj[cur]) {
        if (!vis[next]) {
            vis[next]=true;
            char c;
            if (col=='R') {
                c='B';
            } else {
                c='R';
            }
            colour[idx]=c;
            dfs(next, c, adj);
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, m;
    cin>>n>>m;
    colour.resize(m, 'G');
    vis.resize(n+1);
    vector<pi> adj[n+1];
    for (int i = 0; i <m; ++i) {
        int u,v;
        cin>>u>>v;
        adj[u].push_back({v, i}); //node, idx of edge
        adj[v].push_back({u, i});
    }
    for (int i = 1; i <=n; i++) {
        if (!vis[i]) {
            vis[i]=true;
            dfs(i, 'R', adj);
        }
    }
    for (char c:colour) {
        cout<<c;
    }
}

