import java.util.*;
import java.io.*;

public class olympiads_hw {
	static class edge implements Comparable<edge> {
		int dest;
		long weight;

		edge(int d, long w) {
			dest = d;
			weight = w;
		}

		public int compareTo(edge other) {
			return Long.compare(this.weight, other.weight);
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());

		long[] dist1 = new long[n + 1];
		long[] dist2 = new long[n + 1];
		Arrays.fill(dist1, (long) 1e15);
		Arrays.fill(dist2, (long) 1e15);

		List<edge>[] adj = new ArrayList[n + 1];
		for (int i = 1; i <= n; i++) {
			adj[i] = new ArrayList<>();
		}

		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int l = Integer.parseInt(st.nextToken());
			adj[u].add(new edge(v, l));
		}

		PriorityQueue<edge> pq = new PriorityQueue<>();
		pq.add(new edge(1, 0));
		dist1[1] = 0;

		while (!pq.isEmpty()) {
			edge cur = pq.poll();
			if (cur.weight > dist2[cur.dest]) {
				continue;
			}
			for (edge next : adj[cur.dest]) {
				if (dist1[cur.dest] + next.weight < dist1[next.dest]) {
					dist2[next.dest] = dist1[next.dest];
					dist1[next.dest] = dist1[cur.dest] + next.weight;
					pq.add(new edge(next.dest, dist1[next.dest]));
				} else if (dist1[cur.dest] + next.weight != dist1[next.dest]
						&& dist1[cur.dest] + next.weight < dist2[next.dest]) {
					dist2[next.dest] = dist1[cur.dest] + next.weight;
					pq.add(new edge(next.dest, dist1[next.dest]));
				}
				if ( dist2[cur.dest] + next.weight < dist2[next.dest]) {
					dist2[next.dest] = dist2[cur.dest] + next.weight;
					pq.add(new edge(next.dest, dist1[next.dest]));
				}
			}

		}
		System.out.println(dist2[n] == (long) 1e15 ? -1 : dist2[n]);

	}
}
