import java.util.*;
import java.io.*;

public class CCO_96_P5 {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int roads = Integer.parseInt(st.nextToken());
		int queries = Integer.parseInt(st.nextToken());
		HashMap<String, ArrayList<String>> adj = new HashMap<>();
		HashMap<String, Integer> step = new HashMap<>();
		HashMap<String, String> old = new HashMap<>();
		String[] firstInput = new String[roads];
		String[] secondInput = new String[roads];
		HashSet<String> cities = new HashSet<>();

		for (int i = 0; i < roads; i++) {
			st = new StringTokenizer(br.readLine());
			String input1 = st.nextToken();
			String input2 = st.nextToken();
			firstInput[i] = input1;
			secondInput[i] = input2;
			adj.put(input1, new ArrayList<>());
			adj.put(input2, new ArrayList<>());
			step.put(input1, Integer.MAX_VALUE);
			step.put(input2, Integer.MAX_VALUE);
			old.put(input1, "");
			old.put(input2, "");

		}

		for (int i = 0; i < roads; i++) {
			adj.get(firstInput[i]).add(secondInput[i]);
			adj.get(secondInput[i]).add(firstInput[i]);
		}
		Queue<String> queue = new LinkedList<>();

		queue.add("Rome");
		step.put("Rome", 0);

		// shortest path from Rome
		while (!queue.isEmpty()) {
			String cur = queue.poll();

			for (String next : adj.get(cur)) {
				if (step.get(next) > step.get(cur) + 1) {
					queue.add(next);
					step.put(next, step.get(cur) + 1);
					old.put(next, cur);
				}
			}
		}

		for (int i = 0; i < queries; i++) {
			st = new StringTokenizer(br.readLine());
			String src = st.nextToken();
			String dest = st.nextToken();
			cities.add(src);

			// src to rome
			String srcRome = "" + src.charAt(0);
			String city = src;
			while (!city.equals("Rome")) {
				srcRome += old.get(city).charAt(0);
				city = old.get(city);
				cities.add(city);
			}

			// PR

			// dest to rome

			String destRome = "" + dest.charAt(0);
			city = dest;
			while (!cities.contains(city)) {
				destRome += old.get(city).charAt(0);
				city = old.get(city);

			}
			// FP

			while (srcRome.charAt(srcRome.length() - 1) != destRome.charAt(destRome.length() - 1)) {
				srcRome = srcRome.substring(0, srcRome.length() - 1);
			}
			if (srcRome.length() == 1) {
				srcRome = "";
			} else {
				srcRome = srcRome.substring(0, srcRome.length() - 1);
			}
			//
			for (int j = destRome.length() - 1; j >= 0; j--) {
				srcRome += destRome.charAt(j);
			}

			out.println(srcRome);
			cities.clear();

		}
		out.flush();

	}

}
