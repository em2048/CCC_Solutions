import java.util.*;
import java.io.*;

public class olympiads_hw {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int r = Integer.parseInt(st.nextToken());
		
		List<Integer>[] adj = new ArrayList[n+1];
		int[] bunStep = new int[n+1];
		boolean[] bunVis = new boolean[n+1];
		
		for (int i = 1; i <=n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 0; i <n-1; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			
			adj[a].add(b);
			adj[b].add(a);
		}
		Queue<Integer> q = new LinkedList<>();
		
		for (int i = 0; i <r; i++) {
			int start = Integer.parseInt(br.readLine());
			q.add(start);
			bunStep[start] = 0;
			bunVis[start] = true;
		}
		
		while (!q.isEmpty()) {
			int cur = q.poll();
			for (int next : adj[cur]) {
				if (!bunVis[next]) {
					q.add(next);
					bunVis[next] = true;
					bunStep[next] = bunStep[cur] + 1;
				}
			}
		}
		
		int ans = Integer.MAX_VALUE;
		int[] prev = new int[n+1];
		boolean[] vis = new boolean[n+1];
		
		st = new StringTokenizer(br.readLine());
		int start = Integer.parseInt(st.nextToken());
		int end = Integer.parseInt(st.nextToken());
		q.add(start);
		vis[start] = true;
		
		while (!q.isEmpty()) {
			int cur = q.poll();
			for (int next : adj[cur]) {
				if (!vis[next]) {
					q.add(next);
					vis[next] = true;
					prev[next] = cur;
				}
			}
		}
		
		int idx = end;
		while (idx != start) {
			if (ans > bunStep[idx]) {
				ans = bunStep[idx];
			}
			idx = prev[idx];
		}
		if (ans > bunStep[start]) {
			ans = bunStep[start];
		}
		System.out.println(ans);
		
		
	}
}
