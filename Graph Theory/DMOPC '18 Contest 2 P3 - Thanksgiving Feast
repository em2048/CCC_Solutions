import java.util.*;
import java.io.*;

public class olympiads_hw {
	static List<edge>[] adj;

	static class edge implements Comparable<edge> {
		int dest;
		int weight;

		edge(int d, int w) {
			dest = d;
			weight = w;
		}

		public int compareTo(edge other) {
			return Integer.compare(weight, other.weight);
		}
	}

	 static void dijkstra(int start, int[] dist) {
		PriorityQueue<edge> pq = new PriorityQueue<>();
		pq.add(new edge(start, 0));
		Arrays.fill(dist, Integer.MAX_VALUE);
		dist[start] = 0;
		
		while (!pq.isEmpty()) {
			edge cur = pq.poll();
			if (cur.weight > dist[cur.dest]) {
				continue;
			}
			for (edge next : adj[cur.dest]) {
				if (dist[cur.dest] + next.weight < dist[next.dest]) {
					dist[next.dest] = dist[cur.dest] + next.weight;
					pq.add(new edge(next.dest, dist[next.dest]));
					
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		int a = Integer.parseInt(st.nextToken());
		int b = Integer.parseInt(st.nextToken());

		int[] gift = new int[k];
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < k; i++) {
			gift[i] = Integer.parseInt(st.nextToken());
		}
		adj = new ArrayList[n + 1];
		for (int i = 1; i <= n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 0; i < m; ++i) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			adj[u].add(new edge(v, 1));
			adj[v].add(new edge(u, 1));
		}
		int[] distfromA = new int[n + 1];
		int[] distfromB = new int[n + 1];

		dijkstra(a, distfromA);
		dijkstra(b, distfromB);
		int ans = Integer.MAX_VALUE;
		for (int i = 0; i < k; i++) {
			int length = distfromA[gift[i]] + distfromB[gift[i]];
			if (length < ans) {
				ans = length;
			}

		}
		System.out.println(ans);
		

	}
}
