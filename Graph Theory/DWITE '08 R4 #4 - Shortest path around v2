import java.util.*;
import java.io.*;

public class Main {

	public static void main(String[] args)throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);

		char[][] map = new char[8][8];
		int start = 0;
		int end = 0;
		int[][] step = new int[8][8];

		for (int turn = 0; turn < 5; turn++) {
			// reading input
			for (int j = 0; j < 8; j++) {
				String input = br.readLine();
				for (int k = 0; k < 8; k++) {
					map[j][k] = input.charAt(k);
					step[j][k] = Integer.MAX_VALUE;
					if (input.charAt(k) == 'A') {
						start = k + j * 8;

					}
					if (input.charAt(k) == 'B') {
						end = k + j * 8;
						map[j][k] = '.';
					}
				}
			}

			Queue<Integer> queue = new LinkedList<>();

			step[start / 8][start % 8] = 0;
			queue.add(start);

			while (!queue.isEmpty()) {
				int cur = queue.poll();
				// coords of cur on 2d array
				int a = cur / 8;
				int b = cur % 8;
				if (a - 1 >= 0 && b - 1 >= 0 && map[a - 1][b - 1] == '.' && step[a][b] + 1 < step[a - 1][b - 1]) {
					queue.add((a - 1) * 8 + (b - 1));
					step[a - 1][b - 1] = step[a][b] + 1;
				}
				if (a - 1 >= 0 && map[a - 1][b] == '.' && step[a][b] + 1 < step[a - 1][b]) {
					queue.add((a - 1) * 8 + (b));
					step[a - 1][b] = step[a][b] + 1;
				}
				if (b - 1 >= 0 && map[a][b - 1] == '.' && step[a][b] + 1 < step[a][b - 1]) {
					queue.add((a) * 8 + (b - 1));
					step[a][b - 1] = step[a][b] + 1;
				}
				if (a + 1 < 8 && b - 1 >= 0 && map[a + 1][b - 1] == '.' && step[a][b] + 1 < step[a + 1][b - 1]) {
					queue.add((a + 1) * 8 + (b - 1));
					step[a + 1][b - 1] = step[a][b] + 1;
				}
				if (a + 1 < 8 && map[a + 1][b] == '.' && step[a][b] + 1 < step[a + 1][b]) {
					queue.add((a + 1) * 8 + (b));
					step[a + 1][b] = step[a][b] + 1;
				}
				if (a + 1 < 8 && b + 1 < 8 && map[a + 1][b + 1] == '.' && step[a][b] + 1 < step[a + 1][b + 1]) {
					queue.add((a + 1) * 8 + (b + 1));
					step[a + 1][b + 1] = step[a][b] + 1;
				}
				if (b + 1 < 8 && map[a][b + 1] == '.' && step[a][b] + 1 < step[a][b + 1]) {
					queue.add((a) * 8 + (b + 1));
					step[a][b + 1] = step[a][b] + 1;
				}
				if (a - 1 >= 0 && b + 1 < 8 && map[a - 1][b + 1] == '.' && step[a][b] + 1 < step[a - 1][b + 1]) {
					queue.add((a - 1) * 8 + (b + 1));
					step[a - 1][b + 1] = step[a][b] + 1;
				}
				

			}

			out.println(step[end / 8][end % 8] );
		}
		out.flush();

	}

}
