import java.util.*;
import java.io.*;

public class olympiads_hw {
	static boolean[] vis;
	static long inf = (long) 1e15;

	static class edge implements Comparable<edge> {
		int dest;
		long weight;

		edge(int d, long w) {
			dest = d;
			weight = w;
		}

		public int compareTo(edge other) {
			return Long.compare(this.weight, other.weight);
		}
	}

	static void dijkstra(int src, List<edge>[] adj, long[] dist) {
		PriorityQueue<Long> pq = new PriorityQueue<>();
		Arrays.fill(dist, inf); // dis*1e6 + vertex
		pq.add((long) src);
		dist[src] = 0;

		while (!pq.isEmpty()) {
			long cur = pq.poll();
			long cost = (long) (cur / 1e6);
			int vertex = (int) (cur % 1e6);

			if (vis[vertex]) {
				continue;
			}
			vis[vertex] = true;
			for (edge next : adj[vertex]) {
				if (dist[vertex] + next.weight < dist[next.dest]) {
					dist[next.dest] = dist[vertex] + next.weight;
					pq.add((long) (dist[next.dest] * 1e6 + next.dest));
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());

		List<edge>[] adj = new ArrayList[n + 1];
		List<edge>[] rev = new ArrayList[n + 1];

		for (int i = 1; i <= n; i++) {
			adj[i] = new ArrayList<>();
			rev[i] = new ArrayList<>();
		}

		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int k = Integer.parseInt(st.nextToken());
			adj[a].add(new edge(b, k));
			rev[b].add(new edge(a, k));
		}
		long[] dist1 = new long[n + 1];
		long[] dist2 = new long[n + 1];
		vis = new boolean[n + 1];

		dijkstra(1, adj, dist1);
		vis = new boolean[n + 1];
		dijkstra(n, rev, dist2);

		long ans = dist1[n];
		int d = Integer.parseInt(br.readLine());
		for (int i = 0; i < d; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int k = Integer.parseInt(st.nextToken());
			long cost = dist1[a] + k + dist2[b];
			if (cost < ans) {
				ans = cost;
			}
		}
		System.out.println(ans >= inf ? -1 : ans);

	}
}
