import java.util.*;
import java.io.*;

public class olympiads_hw {
	static List<Integer>[] adj;
	static Stack<Integer> stack;
	static boolean[] vis;
	
	static void dfs (int cur) {
		vis[cur] = true;
		for (int next : adj[cur]) {
			if (!vis[next]) dfs(next);
		}
		stack.add(cur);
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		int n = Integer.parseInt(br.readLine());
		adj = new ArrayList[n + 1];
		vis = new boolean[n+1];
		stack = new Stack<>();
		
		for (int i = 1; i <= n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 1; i <= n; i++) {
			st = new StringTokenizer(br.readLine());
			int c = Integer.parseInt(st.nextToken());
			
			for (int j = 0; j < c; j++) {
				int src = Integer.parseInt(st.nextToken());
				adj[src].add(i);
			}
		}
		
		for (int i = 1; i <=n; i++) {
			if (!vis[i]) {
				dfs(i);
			}
		}
		
		while (!stack.isEmpty()) {
			System.out.print(stack.pop() + " ");
		}
	}
}
