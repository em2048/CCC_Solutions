import java.util.*;
import java.io.*;

public class olympiads_hw {
	
	static class edge {
		int dest, weight;
		edge(int d, int w) {
			dest = d;
			weight = w;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		int n = Integer.parseInt(br.readLine());
		int sum = 0;
		List<edge>[] adj = new ArrayList[n+1];
		for (int i = 0; i <=n; i++) {
			adj[i]= new ArrayList<>();
		}
		for (int i = 0; i <n; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			sum+=c;
			adj[a].add(new edge(b, c));
			adj[b].add(new edge(a, c));
		}
		int[] step = new int[n+1];
		Arrays.fill(step, Integer.MAX_VALUE);
		int max = 0;
		Queue<Integer> q = new LinkedList<>();
		q.add(0);
		step[0] = 0;
		while (!q.isEmpty()) {
			int src = q.poll();
			for (edge x : adj[src]) {
				if (step[x.dest] == Integer.MAX_VALUE) {
					q.add(x.dest);
					step[x.dest] = step[src] + x.weight;
				}
			}
		}
		Arrays.sort(step);
		max = step[n];
		System.out.println(2*sum-max);
	}
}
