import java.util.*;
import java.io.*;

public class olympiads_hw {

	static class edge implements Comparable<edge> {
		int dest, weight;

		edge(int d, int w) {
			dest = d;
			weight = w;
		}

		public int compareTo(edge other) {
			return Integer.compare(this.weight, other.weight);
		}
	}

	static PriorityQueue<edge> pq;
	static List<edge>[] adj;
	static int[] dist;
	static boolean[] vis;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int nodes = Integer.parseInt(st.nextToken());
		int edges = Integer.parseInt(st.nextToken());
		int source = Integer.parseInt(st.nextToken());
		int q = Integer.parseInt(st.nextToken());

		adj = new ArrayList[nodes + 1];
		for (int i = 1; i <= nodes; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 0; i < edges; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			adj[u].add(new edge(v, w));
			adj[v].add(new edge(u, w));
		}
		pq = new PriorityQueue<>();
		dist = new int[nodes + 1];
		Arrays.fill(dist, Integer.MAX_VALUE);
		vis = new boolean[nodes + 1];
		dist[source] = 0;
		pq.add(new edge(source, 0));

		while (!pq.isEmpty()) {
			edge cur = pq.poll();
			if (vis[cur.dest])
				continue;
			vis[cur.dest] = true;
			for (edge next : adj[cur.dest]) {
				if (dist[cur.dest] + next.weight < dist[next.dest]) {
					dist[next.dest] = dist[cur.dest] + next.weight;
					pq.add(new edge(next.dest, dist[next.dest]));
				}
			}
		}
		for (int i = 0; i<q; i++) {
			int house = Integer.parseInt(br.readLine());
			if (vis[house]) {
				System.out.println(dist[house]);
			} else {
				System.out.println(-1);
			}
		}
	}
}
